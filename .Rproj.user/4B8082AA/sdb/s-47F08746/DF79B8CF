{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Making maps in R\"\nauthor: \"Reka Solymosi (supplementing material produced as well by Juanjo Medina)\"\ndate: \"25/01/2018\"\noutput:\n  html_document: default\n  \n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n#A quick introduction of terms\n\n##Geospatial Perspective - The Basics\n\nGeospatial analysis provides a distinct perspective on the world, a unique lens through which to examine events, patterns, and processes that operate on or near the surface of our planet. Ultimately geospatial analysis concerns what happens where, and makes use of geographic information that links features and phenomena on the Earth's surface to their locations. \n\nWe can talk about a few different concepts when it comes to spatial information. These are: \n\n- Place\n- Attributes\n- Objects\n\n\n###Place\n\nAt the center of all spatial analysis is the concept of *place*. People identify with places of various sizes and shapes, from the room with the parcel of land, to the neighbourhood, to the city, the country, the state or the nation state. Plcaes often have names, and people use these to talk about and distinguesh names. Names can be official. Places also change continually as people move. The basis of rigorous and precise definition of place is a coordinate system, a set of measurements that allows place to be specified unambiguously and in a way that is meaningful to everyone. \n\n###Attributes\n\nAttribute has become the preferred term for any recorded characteristoc or property of a place. A place's name is an obvious example of an attribute. But there can be other pices of information, such as numer of crimes in a neighbourhood, or the GDP of a country. Within GIS the term 'attributes' usually refers to records in a data table associated with individual features in a vector map or cells in a grid (raster or image file). These data behave exactly as data you have encountered in your data analysis courses. The rows represent observations, and the columns represent variables. The variables can be numeric or categorical, and depending on what they are, you can apply different methods to making sense of them. \n\n###Objects\n\nIn spatial analysis it is customary to refer to places as objects. These objects can be a whole country, or a road. In studies of climate change, the objects of interest might be weather stations of minimal extent, and will be represented as points. On the other hand, studies of social or economic patterns may need to consider the two-dimenstional extent of places, which will therefore be represented as areas. These representations of the world are part of what is called the vector data model: A representation of the world using points, lines, and polygons. Vector models are useful for storing data that have discrete boundaries, such as country borders, land parcels, and streets. This is made up of points, lines, and areas (polygons): \n\n- Points\n    + Points are pairs of coordinates, in latitude/longitude or some other standard system\n- Lines\n    + Lines are ordered sequences of points connected by straight lines\n- Areas (polygons)\n    + Areas are ordered rigns of points, also connected by straight lines to form polygons. It can contain holes, or be linked with separate islands. \n    \n![](http://neondataskills.org/images/dc-spatial-vector/pnt_line_poly.png)\n\n\nObjects can also be Raster data. Raster data is made up of pixels (or cells), and each pixel has an associated value. Simplifying slightly, a digital photograph is an example of a raster dataset where each pixel value corresponds to a particular colour. In GIS, the pixel values may represent elevation above sea level, or chemical concentrations, or rainfall etc. The key point is that all of this data is represented as a grid of (usually square) cells. You will most likely be dealing with vector data in your internships, so we will be focusing on these. \n\n###Maps\n\nHistorically maps have been the primary means to store and communicate spatial data. Objects and their attributes can be readily depicted, and the human eye can quickly discern patterns and anomalies in a well-designed map. \n\n\n###Map projections\n\nMap projections try to portray the surface of the earth or a portion of the earth on a flat piece of paper or computer screen. A coordinate reference system (CRS) then defines, with the help of coordinates, how the two-dimensional, projected map in your GIS is related to real places on the earth. The decision as to which map projection and coordinate reference system to use, depends on the regional extent of the area you want to work in, on the analysis you want to do and often on the availability of data. \n\n\nA traditional method of representing the earth’s shape is the use of globes. When viewed at close range the earth appears to be relatively flat. However when viewed from space, we can see that the earth is relatively spherical. Maps, are representations of reality. They are designed to not only represent features, but also their shape and spatial arrangement. Each map projection has advantages and disadvantages. The best projection for a map depends on the scale of the map, and on the purposes for which it will be used. For your purposes, you just need to understand that essentially there are different ways to flatten out the earth, in order to get it into a 2-dimensional map. \n\n\nThe process of creating map projections can be visualised by positioning a light source inside a transparent globe on which opaque earth features are placed. Then project the feature outlines onto a two-dimensional flat piece of paper. Different ways of projecting can be produced by surrounding the globe in a cylindrical fashion, as a cone, or even as a flat surface. Each of these methods produces what is called a map projection family. Therefore, there is a family of planar projections, a family of cylindrical projections, and another called conical projections [see figure_projection_families](http://docs.qgis.org/2.8/en/_images/projection_families.png)\n\n![figure_projection_families](http://docs.qgis.org/2.8/en/_images/projection_families.png)\n\n\nWith the help of coordinate reference systems (CRS) every place on the earth can be specified by a set of three numbers, called coordinates. In general CRS can be divided into projected coordinate reference systems (also called Cartesian or rectangular coordinate reference systems) and geographic coordinate reference systems.\n\nThe use of Geographic Coordinate Reference Systems is very common. They use degrees of latitude and longitude and sometimes also a height value to describe a location on the earth’s surface. The most popular is called WGS 84. This is the one you will most likely be using, and if you get your data in latitude and longitude, then this is the CRS you are working in. It is also possible that you will be using a projected CRS. This two-dimensional coordinate reference system is commonly defined by two axes. At right angles to each other, they form a so called XY-plane. The horizontal axis is normally labelled X, and the vertical axis is normally labelled Y. Working with data in the UK, you are most likely to be using British National Grid (BNG). The Ordnance Survey National Grid reference system is a system of geographic grid references used in Great Britain, different from using Latitude and Longitude. In this case, points will be defined by \"Easting\" and \"Northing\" rather than \"Longitude\" and \"Latitude\".  It basically divides the UK into a series of squares, and uses references to these to locate something. The most common usage is the six figure grid reference, employing three digits in each coordinate to determine a 100 m square. For example, the grid reference of the 100 m square containing the summit of Ben Nevis is NN 166 712. Grid references may also be quoted as a pair of numbers: eastings then northings in metres, measured from the southwest corner of the SV square. For example, the grid reference for Sullom Voe oil terminal in the Shetland Islands may be given as HU396753 or 439668,1175316\n\n![BNG](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/Ordnance_Survey_National_Grid.svg/500px-Ordnance_Survey_National_Grid.svg.png)\n\n\nThis will be important later on when we are linking data from different projections, or when you look at your map and you try to figure out why it might look \"squished\". \n\n###Networks\n\nWe already mentioned lines that constitute objects of spatial data, such as streets, roads, railroads, etc. Networks constitute one-dimensional structures embedded in two or three dimensions. Discrete point objects may be distributed on the netowkr, representing phenomena such as landmarks, or observation points. Mathematically, a network forms a graph, and many techniques developed for graphs have application to networks. These include various ways of measuring a network's connectivity, or of finding the shortest path between pairs of points on a network. You can have a look at the [lesson on network analysis in the QGIS documentation](https://docs.qgis.org/2.2/en/docs/training_manual/vector_analysis/network_analysis.html)\n\n###Density estimation\n\nOne of the more useful concepts in spacial analysis is density - the density of humans in a crowded city, or the density of retail stores in a shopping centre. Mathematically, the density of some kind of object is calculated by counting the number of such objects in an area, and dividing by the size of the area. To read more about this, I recommend [Silverman, Bernard W. Density estimation for statistics and data analysis. Vol. 26. CRC press, 1986.](https://books.google.co.uk/books?id=e-xsrjsL7WkC&dq=silverman+density+estimation+for+statistics&lr=&source=gbs_navlinks_s)\n\n##Summary\n\nRight so hopefully this gives you a few things to think about. Be sure that you are confident to know about: \n\n - Spatial objects - what they are and how they are represented\n - Attributes - the bits of information that belong to your spatial objects\n - Maps and projections - especially what WSG84 and BNG mean, and why it's important that you know what CRS your data have\n \n \n#Getting some spatial data to put on a map\n\n\n##Find a shapefile\n\nYou will often need a boundary shapefile for your data analysis. Sometimes you will be given spatial data to begin with, such as a shapefile, or point coordinates with latitudes and longitudes (or eastings and northings). But other times you might have to find this yourself, and join the non-spatial data to these. This latter case is what the first part of this tutorial will demonstrate. In this case, you will have to source the spatial data yourself. \n\nYou can acquire spatial data from various sources. An example is Census Boundary Data. You can read more about that [here](https://census.ukdataservice.ac.uk/use-data/guides/boundary-data). \"Boundary data are a digitised representation of the underlying geography of the census\". Census Geography is often used in research and spatial analysis because it is divided into units based on population counts, created to form comparable units, rather than administrative boundaries such as wards or police force areas. However depending on your research question and the context for your analysis, you might be using different units. The hierarchy of the census geographies goes from Country to Local Authority to Middle Layer Super Output Area (MSOA) to Lower Layer Super Output Area (LSOA) to Output Area: \n\n![](https://census.ukdataservice.ac.uk/media/98325/maps_geography_types.png)\n\n\nHere we will get some boundaries for Manchester. Let's use the LSOA level. These are geographical regions designed to be more stable over time and consistent in size than existing administrative and political boundaries. LSOAs comprise, on average, 600 households that are combined on the basis of spatial proximity and homogeneity of dwelling type and tenure. Neighbourhoods are often operationalised as LSOAs.\n\nSo to get some boundary data, you can use the UK Data Service website. There is a simple [Boundary Data Selector](https://borders.ukdataservice.ac.uk/bds.html)(link text: https://borders.ukdataservice.ac.uk/bds.html)\n\n\nWhen you get to the link, you will see on the top there is some notification to help you with the boundary data selector. If you are feeling unsure at any point, feel free to click on that help to guide you. \n\nFor now, let's focus on the selector options. Here you can choose the country you want to select shapefiles for. We select \"England\". You can also choose the type of geography we want to use. Here we select \"Statistical Building Block\", as discussed above. And finally you can select when you want it for. If you are working with historical data, it makes sense to find boundaries that match the timescale for your data. Here we will be dealing with contemporary data, and therefore we want to be able to use the newest available boundary data. \n\n\n***\n\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/boundary_selector_1.png) \n\nOnce you have selected these options, click on the \"Find\" button. That will populate the box below: \n\n***\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/boundary_selector_2.png)\n\n***\n\nHere you can select the boundaries we want. As discussed, we want the census lower super output areas. But again, your choice here will depend on what data you want to be mapping. \n\nOnce you've made your choice, click on \"List Areas\". This will now populate the box below. We are here concerned with Manchester. However you can select more than one if you want boundarie for more than one area as well. Just hold down \"ctrl\" to select multiple areas individually, or the shift key to select everything in between. \n\n\n***\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/boundary_selector_3.png) \n\n\n***\n\n\nOnce you've made your decision click on the \"Extract Boundary Data\" button. You will see the following message: \n\n\n***\n\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/wait.png)\n\n\n***\n\nYou can bookmark, or just stay on the page and wait. How long you have to wait will depend on how much data you have requested to download. \n\nWhen your data is read, you will see the following message: \n\n\n***\n\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/download.png)  \n\n\n***\n\n\nYou have to right click on the \"BoundaryData.zip\", and hit Save Target as on a PC or Save Link As on a Mac: \n\n\n***\n\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/save_link_as.png) \n\n\n***\n\nNavigate to the folder you have created for this analysis, and save the .zip file there. Extract the file contents using whatever you like to use to unzip compressed files. You should end up with a folder called \"BoundaryData\". Have a look at its contents: \n\n\n***\n\n![](/https://raw.githubusercontent.com/maczokni/QSTEP/imgs/folder_contents.png)\n\n\n***\n\n\nSo you can see immediately that there are some documentations around the usage of this shapefile, in the readme and the terms and conditions. Have a look at these as they will contain information about how you can use this map. For example, all your maps will have to mention where you got all the data from. So since you got this boundary data from the UKDS, you will have to note the following: \n\n\"Contains National Statistics data © Crown copyright and database right [year]\n    Contains OS data © Crown copyright [and database right] (year)\"\n\nYou can read more about this in the terms and conditions document. \n\nBut then you will also notice that there are 4 files with the same name \"england_oac_2011\". It is important that you keep all these files in the same location as each other! They all contain different bits of information about your shapefile: \n\n- .shp — shape format; the feature geometry itself - this is what you see on the map\n- .shx — shape index format; a positional index of the feature geometry to allow seeking forwards and backwards quickly\n- .dbf — attribute format; columnar attributes for each shape, in dBase IV format. \n- .prj — projection format; the coordinate system and projection information, a plain text file describing the projection using well-known text format\n\nSometimes there might be more files associated with your shapefile as well, but we will not cover them here. \n\n\n\n##Where to save your data (aka we need to talk about working directories)\n\nThere is a myth about the scientist and the messy workspace, typically illustrated with Albert Einstein: \n\n![](http://q.likesuccess.com/104/5190697-albert-einstein-messy-desk.jpg)\n\n\nHowever many of us need order to be able to work properly. An organised workspace is also prominent, as we can see with these famous work spaces: \n\n\n```{r, out.width = \"250px\", echo=FALSE}\nknitr::include_graphics(\"https://s-media-cache-ak0.pinimg.com/236x/67/75/9f/67759f0b23e8e39bb53bca497edc7b75.jpg\") \nknitr::include_graphics(\"https://s-media-cache-ak0.pinimg.com/236x/f7/cd/d5/f7cdd5ddf82968c2df75a21184d8f456.jpg\") \nknitr::include_graphics(\"http://static.artuk.org/w1200h1200/OU/OU_HMC_NO47.jpg\") \nknitr::include_graphics(\"https://static1.squarespace.com/static/5365bed7e4b0d9593917b669/55d2a259e4b069700c36e0f7/55ced1f6e4b0e9aecb83b4b1/1439867195259/Writer+-+Voltaire.gif?format=500w\")\nknitr::include_graphics(\"http://farm8.static.flickr.com/7631/16842204112_b4b5d11683.jpg\") \nknitr::include_graphics(\"https://static1.squarespace.com/static/5365bed7e4b0d9593917b669/55d2a259e4b069700c36e0f7/55ce49cfe4b068d2e791f3bd/1439862429942/Writer+-+Charles+Dickens.jpg?format=500w\") \n\n\n```\n\n\n(Galileo, Marie Curie, John Dalton, Voltaire, Alan Turing, Charles Dickens)\n\n\nWhen working in R, you have to consider your workspace. It helps immensely to keep our code and notes organised. You will likely have a project folder, where you save your data, your graphs, your analysis outputs, etc. Here we can show how to designate a folder where R will save things such as outputs and scipts, and also where it will read data in from. \n\n##Create a folder to work in\n\n\nCreate a folder to save your data and our outputs in. In R, this is known as a **working directory**. So firstly, before we begin to do any work, we should create our **working directory**. This is simply a folder where you will save all our data, and also where you will be reading data in from. You can create a new folder, where you will save everything for this project, or you can choose an existing folder. It's advised that you create a folder, and also give it some name you remember, that will be meaningful. Generally try to avoid spaces and special characters in folder (and file) names. It's not necessarily a good idea to just dump everything into 'Desktop' either, as you want to be able to find things later, and maybe keep things tidy. \n\n\nAnyway, once you have a folder identified, you will need to know the *path* to this folder. That is the route that you will be using in your code to read/write files from/to the right directory. Often you will get errors, about certain things \"not found\" due to incorrect file paths. So it's important that we find the correct path. I now have to tell R about the path to this folder. You can do this a few ways, here I'll show two:\n\n\n###The pointy and clicky: \n\n\nYou can simply set your working directiory using the graphical user interface of R Studio:\n\nClick on Session > Set working directory > Choose directory...\n\n![Set working directory](/Users/reka/Desktop/course-incubator/images/setwd.png)\n\nThen navigate to the folder you want to use, open it, and click on 'Open'.\n\nThis will have set your working directory to that folder where you just selected\n\n\n###Set the filepath with code:\n\nThe function to use to set working directory is `setwd()`. Inside the brackets you need to write the path to your folder, in quotation marks. So for me this is: \n\n\n```{r, eval=FALSE}\nsetwd(\"/Users/reka/Desktop/course-incubator\")\n```\n\n\nIf I copy that into the R script and run it, then my working directory will be set to this folder, called \"course-incubator\" on my Desktop. \n\n\nSo for you to be able to use this method, you need to find the filepath to your folder. How do you find this? There are multiple ways of finding the correct path for both macs and PCs, I will give an example for a mac and one for a PC here.\n\nOn a mac you can find the path to a specific file or folder by first opening Terminal, then opening Finder and navigating to the folder or file in Finder. Once you have found it, just drag and drop the folder or file it into the Terminal window. This will print out the path to your file or folder. You can then copy this, and paste it into the `setwd()` function. \n\n\n![Find mac file path](/Users/reka/Desktop/course-incubator/images/find_file_path.gif)\n\n\n\n\nOn a PC, you can fing a path to a file or folder by navitgating to it using *Windows Explorer* and once there, copying the file path from the top bar. This is illustrated by the red circle below:\n\n\n![Find pc file path](/Users/reka/Desktop/course-incubator/images/windows_file_path.png)\n\n\nNOTE: When you copy this file path from the PC version, you will have to change the direction of the dashes, when passing this as a text string to a variable in Python. So you will have to replace all backslash (`\\`) with forwardslash (`/`).\n\nFor example: \n`C:\\Users\\mesike\\Desktop\\dokumentumok`\nshould become\n`C:/Users/mesike/Desktop/dokumentumok`\n\nWhichever way you choose, once you have done this you can save all data in this folder, and read them in from here. Also any outputs like plots, maps and code get saved here as well.  \n\n\n###So, make sure that this is where you have saved your shapefile!\n\n\n\n##Reading the map into R\n\n\nOK so we will be using the sf package. Install if you don't already have.\n\n```{r}\nlibrary(sf)\n```\n\n**On Mac and Linux a few requirements must be met to install sf. These are described in the package’s README at [github.com/r-spatial/sf](github.com/r-spatial/sf).**\n\nTo read in your data, you will need to know the path to where you have saved it. Ideally this will be in your working directory. \n\n\nLet's create an object and assign it our shapefile's name:\n\n```{r}\nshp_name <- \"england_lsoa_2011.shp\"\n```\n\n\nMake sure that this is saved in your working directory, and you have set your working directory. \n\nNow use the `st_read()` function to read in the shapefile: \n\n```{r, eval=FALSE}\n\nmanchester_lsoa <- st_read(shp_name)\n\n```\n\n\n```{r, echo=FALSE}\n\nmanchester_lsoa <- st_read(\"/Users/reka/Dropbox (The University of Manchester)/31152_60142 GIS and Crime Mapping/2018_labs/shapefiles/england_lsoa_2011.shp\")\n\n```\n\n\nNow you have your spatial data file. You can have a look at what sort of data it contains, the same way you would view a dataframe, with the `View()` function: \n\n\n```{r, eval=FALSE}\n\nView(manchester_lsoa)\n\n```\n\n```{r, echo=FALSE}\n\nhead(manchester_lsoa)\n\n```\n\n\nAnd of course, since it's spatial data, you can finally map it: \n\n\n```{r}\n\nplot(manchester_lsoa)\n\n```\n\n\nThis is the main way that we will be creating maps. Now we will leave this at this for today. \n\n\n#Interactive maps with Leaflet\n\nSo this is a super brief intro into some of the cool things you can do with leaflet. There are comprehensive tutorials available online, for example [here](https://rstudio.github.io/leaflet/).\n\n[Leaflet](http://leafletjs.com/) is the leading open-source JavaScript library for mobile-friendly interactive maps. It is very most popular, used by websites ranging from The New York Times and The Washington Post to GitHub and Flickr, as well as GIS specialists like OpenStreetMap, Mapbox, and CartoDB.\n\n\nIn this section of the lab we will learn how to make really flashy looking maps using leaflet. \n\nYou will need to have installed the following packages to follow along:\n\n```{r, eval=FALSE}\ninstall.packages(\"leaflet\") #for mapping\ninstall.packages(\"RColorBrewer\") #for getting nice colours for your maps\n```\n\n\nOnce you have them installed, load them up with the `library()` function:\n\n##Making a map\n\nTo make a map, just load the leaflet library:\n\n```{r}\nlibrary(leaflet)\n```\n\nYou then create a map with this simple bit of code:\n\n```{r}\nm <- leaflet() %>%\n  addTiles()  \n```\n\nAnd just print it:\n```{r}\nm  \n```\n\n##Adding some content:\n\nYou might of course want to add some content to your map. \n\n##Adding points manuall:\n\nYou can add a point manually:\n\n```{r}\nm <- leaflet() %>%\n  addTiles()  %>% \n  addMarkers(lng=-2.230899, lat=53.464987, popup=\"You are here\")\nm  \n```\n\nOr many points manually:\n\n```{r}\n\nlatitudes = c(53.464987, 53.472726, 53.466649) \nlongitudes = c(-2.230899, -2.245481, -2.243421) \npopups = c(\"You are here\", \"Here is another point\", \"Here is another point\") \ndf = data.frame(latitudes, longitudes, popups)      \n\nm <- leaflet(data = df) %>%\n  addTiles()  %>%  \n  addMarkers(lng=~longitudes, lat=~latitudes, popup=~popups)\nm  \n```\n\n##Change the basemap\n\nYou can change the background as well. You can find a list of different basemaps [here](http://leaflet-extras.github.io/leaflet-providers/preview/index.html).\n\n```{r}\nm <- leaflet(data = df) %>%\n  addProviderTiles(\"Stamen.Toner\") %>% \n  addMarkers(lng=~longitudes, lat=~latitudes, popup=~popups)\nm  \n```\n\n\n##Adding data from elsewhere\n\nYou will most likely want to add data to your map form external sources, rather than manually creating points. \n\nFor example, I illustrate here with data from [Manchester Open Data](http://open.manchester.gov.uk/) about public toilets: \n\n```{r}\npublicToilets <- read.csv(\"http://www.manchester.gov.uk/open/download/downloads/id/171/public_toilets.csv\")\n```\n\nOften spatial data will not come with latitude/longitude format, but with easting and northing. Leaflet (as far as I know) prefers lat/long so we might have to convert from BNG to WGS84. \n\nFirst thing we might notice is that the coordinates are in Easting and Northing format, rather than Latitude/ Longitude: \n\n```{r}\npublicToilets[,8:9]\n```\n\nThere is a comprehensive step-by-step tutorial on converting coordinates [here](http://www.alex-singleton.com/R-Tutorial-Materials/7-converting-coordinates.pdf). I'll just briefly demo this here.\n\n##Reprojecting coordinates\n\n\n```{r}\n#the library I'm using here is rgdal\nlibrary(rgdal)\n\n#these are the variables for the coordinate system types\nbng = \"+init=epsg:27700\"\nlatlong = \"+init=epsg:4326\"\n\n#create coords\ncoords <- cbind(Easting = as.numeric(as.character(publicToilets$GeoX)),\n                Northing = as.numeric(as.character(publicToilets$GeoY)))\n\n# create a SpatialPointsDataFrame\npublicToiletsSPDF <- SpatialPointsDataFrame(coords, data = publicToilets, proj4string = CRS(bng))\n\n#reproject with spTransform\npublicToiletsSPDF_latlng <- spTransform(publicToiletsSPDF, CRS(latlong))\n\n#extract coords into a column\npublicToiletsSPDF_latlng@data$lng <- publicToiletsSPDF_latlng@coords[,1]\npublicToiletsSPDF_latlng@data$lat <- publicToiletsSPDF_latlng@coords[,2]\n\n```\n\nNow you should have a reprojected spatial points data frame with latitude and longitude, ready to be mapped: \n\n```{r}\nm <- leaflet(data = publicToiletsSPDF_latlng@data) %>%\n  addProviderTiles(\"Stamen.Toner\")  %>%  \n  addMarkers(lng=~lng, lat=~lat, popup=~LocationText)\nm  \n```\n\n\n\n",
    "created" : 1516894365476.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "9905904",
    "id" : "DF79B8CF",
    "lastKnownWriteTime" : 1516898910,
    "last_content_update" : 1516898910073,
    "path" : "~/Dropbox (The University of Manchester)/31152_60142 GIS and Crime Mapping/2018_labs/Second_session.Rmd",
    "project_path" : "Second_session.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}