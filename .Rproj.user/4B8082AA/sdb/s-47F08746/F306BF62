{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Leaflet RUM Session\"\nauthor: \"Reka Solymosi\"\ndate: \"2/2/2017\"\noutput: html_document\n---\n\n#Intro\n\nSo this is a super brief intro into some of the cool things you can do with leaflet. There are comprehensive tutorials available online, for example [here](https://rstudio.github.io/leaflet/).\n\nYou will need to have installed the following packages to follow along:\n\n```{r, eval=FALSE}\ninstall.packages(\"leaflet\") #for mapping\n\ninstall.packages(\"RColorBrewer\") #for getting nice colours for your maps\n\ninstall.packages(\"rgdal\") #for getting data from TfGM API\ninstall.packages(\"httr\") #for getting data from TfGM API\ninstall.packages(\"jsonlite\") #for getting data from TfGM API\n\ninstall.packages(\"shiny\") #for making interactive app with leaflet\n```\n\n\n#Making a map\n\nTo make a map, just load the leaflet library:\n\n```{r}\nlibrary(leaflet)\n```\n\nYou then create a map with this simple bit of code:\n\n```{r}\nm <- leaflet() %>%\n  addTiles()  \n```\n\nAnd just print it:\n```{r}\nm  \n```\n\n#Adding some content:\n\nYou might of course want to add some content to your map. \n\n#Adding points manuall:\n\nYou can add a point manually:\n\n```{r}\nm <- leaflet() %>%\n  addTiles()  %>% \n  addMarkers(lng=-2.230899, lat=53.464987, popup=\"You are here\")\nm  \n```\n\nOr many points manually:\n\n```{r}\n\nlatitudes = c(53.464987, 53.472726, 53.466649) \nlongitudes = c(-2.230899, -2.245481, -2.243421) \npopups = c(\"You are here\", \"Here is another point\", \"Here is another point\") \ndf = data.frame(latitudes, longitudes, popups)      \n\nm <- leaflet(data = df) %>%\n  addTiles()  %>%  \n  addMarkers(lng=~longitudes, lat=~latitudes, popup=~popups)\nm  \n```\n\n#Change the basemap\n\nYou can change the background as well. You can find a list of different basemaps [here](http://leaflet-extras.github.io/leaflet-providers/preview/index.html).\n\n```{r}\nm <- leaflet(data = df) %>%\n  addProviderTiles(\"Stamen.Toner\") %>% \n  addMarkers(lng=~longitudes, lat=~latitudes, popup=~popups)\nm  \n```\n\n\n#Adding data from elsewhere\n\nYou will most likely want to add data to your map form external sources, rather than manually creating points. \n\nFor example, I illustrate here with data from [Manchester Open Data](http://open.manchester.gov.uk/) about public toilets: \n\n```{r}\npublicToilets <- read.csv(\"http://www.manchester.gov.uk/open/download/downloads/id/171/public_toilets.csv\")\n```\n\nOften spatial data will not come with latitude/longitude format, but with easting and northing. Leaflet (as far as I know) prefers lat/long so we might have to convert from BNG to WGS84. \n\nFirst thing we might notice is that the coordinates are in Easting and Northing format, rather than Latitude/ Longitude: \n\n```{r}\npublicToilets[,8:9]\n```\n\nThere is a comprehensive step-by-step tutorial on converting coordinates [here](http://www.alex-singleton.com/R-Tutorial-Materials/7-converting-coordinates.pdf). I'll just briefly demo this here.\n\n##Reprojecting coordinates\n\n```{r}\n#the library I'm using here is rgdal\nlibrary(rgdal)\n\n#these are the variables for the coordinate system types\nbng = \"+init=epsg:27700\"\nlatlong = \"+init=epsg:4326\"\n\n#create coords\ncoords <- cbind(Easting = as.numeric(as.character(publicToilets$GeoX)),\n                Northing = as.numeric(as.character(publicToilets$GeoY)))\n\n# create a SpatialPointsDataFrame\npublicToiletsSPDF <- SpatialPointsDataFrame(coords, data = publicToilets, proj4string = CRS(bng))\n\n#reproject with spTransform\npublicToiletsSPDF_latlng <- spTransform(publicToiletsSPDF, CRS(latlong))\n\n#extract coords into a column\npublicToiletsSPDF_latlng@data$lng <- publicToiletsSPDF_latlng@coords[,1]\npublicToiletsSPDF_latlng@data$lat <- publicToiletsSPDF_latlng@coords[,2]\n\n```\n\nNow you should have a reprojected spatial points data frame with latitude and longitude, ready to be mapped: \n\n```{r}\nm <- leaflet(data = publicToiletsSPDF_latlng@data) %>%\n  addProviderTiles(\"Stamen.Toner\")  %>%  \n  addMarkers(lng=~lng, lat=~lat, popup=~LocationText)\nm  \n```\n\n#Add more meaning to your markers\n\nYou can also make your markers tell you something about your data. \n\nLet's look at a different dataset. \n\nThis one from TfGM (accessed through their API). To use their API, you will have to get your own key. You can then use the code below, by replacing \"enter your key here\" with your key. To get your own key you simply have to [register with TFGM on their site for developers](https://developer.tfgm.com/). \n\n```{r, eval=FALSE}\napi_key <- \"enter your key here\"\n```\n\n```{r, echo=FALSE}\nfileName <- \"tfgmKey.txt\"\napi_key <-readChar(fileName, file.info(fileName)$size)\n```\n\nAnyway once you have a key, you can get some data about various different transporty things. For example, here we get some information about car parks:\n\n```{r}\nlibrary(httr) #library I use for getting data from API\nlibrary(jsonlite) #library I use for parsing the data into a dataframe\n\n#get the data\nreq <- GET(\"https://api.tfgm.com/odata/Carparks?$expand=Location&$top=500\", \n  add_headers(\"Ocp-Apim-Subscription-Key\" = api_key))\nstop_for_status(req)\n\n#parse the data\nthing <- content(req, as='text')\nthing2 <- fromJSON(thing)\n\n#finally get coordinates to columns from the WKT\nthing2$value$lon <- as.numeric(paste0(\"-\",gsub(\".*?([0-9]+[.][0-9]+).*\", \"\\\\1\", thing2$value$Location$LocationSpatial$Geography$WellKnownText)))\nthing2$value$lat <- as.numeric(gsub(\".* ([-]*[0-9]+[.][0-9]+).*\", \"\\\\1\", thing2$value$Location$LocationSpatial$Geography$WellKnownText))\n\n```\n\nNow we have some live data about car parks! Let's map this! \n\n##Marker size and colous\n\nWe can set the size of the dots to indicate how many free spaces are currently available. We can also colour by a factor, let's say by the 'state' of the carpark. \n\n```{r}\nlibrary(RColorBrewer) #library for getting nice colours for your maps\n\n#set colour scheme:\npal <- colorFactor(\"Paired\", thing2$value$State) \n\n#can build a more complex popup by ysing paste:\npopupText <- paste0(\"Name:\",\n                    thing2$value$Description,\n                    \"<br>\",\n                    \"State: \",\n                    thing2$value$State,\n                    \"<br>\",\n                    \"Capacity: \",\n                    thing2$value$Capacity)\n\nleaflet(thing2$value) %>% \n  addProviderTiles(\"Stamen.Toner\") %>%\n  addCircleMarkers(\n    lng = ~lon,\n    lat = ~lat,\n    radius = ~Capacity/75, #am making the numbers smaller otherwise we get giant blobs\n    fillColor = ~pal(State),\n    popup = popupText,\n    stroke = 0.01,\n    color = \"black\",\n    fillOpacity = 1,\n    weight=1\n  ) \n```\n\nMight also want to add a legend. Can do this with the `addLegend()` function. \n\n```{r}\nleaflet(thing2$value) %>% \n  addProviderTiles(\"Stamen.Toner\") %>%\n  addCircleMarkers(\n    lng = ~lon,\n    lat = ~lat,\n    radius = ~Capacity/75, #am making the numbers smaller otherwise we get giant blobs\n    fillColor = ~pal(State),\n    popup = popupText,\n    stroke = 0.01,\n    color = \"black\",\n    fillOpacity = 1,\n    weight=1\n  ) %>%\n  addLegend(\"bottomright\", pal = pal, values = ~State,\n    title = \"State of carpark\",\n    opacity = 1)\n```\n\n\n##Cluster the markers\n```{r}\nleaflet(thing2$value) %>% \n  addProviderTiles(\"Stamen.Toner\") %>%\n  addMarkers(\n    lng = ~lon,\n    lat = ~lat,\n    popup = ~Description,\n    clusterOptions = markerClusterOptions()\n  ) \n```\n\n#Can also map polygons\n\nCan also easily produce thematic maps with leaflet, or play around with polygons.\n\nYou can import a shapefile you might already have on your computer. For example, I have this\n\n```{r}\nfixMyStreet <- readOGR(dsn = \"/Users/reka/Desktop/Data\", \"allDataAtLsoa\")\nfixMyStreet <- spTransform(fixMyStreet, CRS(\"+proj=longlat +datum=WGS84\"))\n\n```\n\n```{r}\n#make a fancy popup\nboroughs_popup <- paste0(\"<strong>LSOA: </strong>\",\n                         fixMyStreet@data$LSOA11NM,\n                         \"<br><strong>Number of incivility reports: </strong>\",\n                         fixMyStreet@data$n_inciv)\n#create colour palette\n# rcolourbrewer gives loads to choose from, here are some examples: \n\n#DivergingBrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral\n\n#QualitativeAccent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3\n\n#SequentialBlues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd\n\n\npal <- colorNumeric(\n  palette = \"YlOrRd\",\n  domain = fixMyStreet@data$n_inciv\n)\n\n#make map\nleaflet() %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons( data = fixMyStreet,\n    stroke = TRUE, weight= 1, fillOpacity = 0.8, \n    color = ~pal(n_inciv), \n    popup = boroughs_popup\n  ) %>%\n#and add a Legend as well\n  addLegend(pal = pal, \n            values = fixMyStreet@data$n_inciv,\n            title = \"Number of incivility reports\",\n            labFormat = labelFormat(suffix = \" incivs\"),\n            opacity = 0.8\n  )\n\n```\n\n##Mapping from geojson file\n\nCan also map polygons from geojson files from the web. For example, here is a map of population density (number of persons per hectare) at the Output Area Level in Manchester: \n\n```{r}\n\ngeoData <- readLines(\"https://data.cdrc.ac.uk/dataset/35c1fb9d-df77-4261-9861-14fc75d6f26a/resource/da9e9f72-4d11-46e9-b33a-7a5e24b83d0c/download/cdrc-2013-mid-year-total-population-estimates-geodata-pack-lsoa-manchester-e08000003.geojson\", warn = FALSE) %>%\n  paste(collapse = \"\\n\") %>%\n  fromJSON(simplifyVector = FALSE)\n\nvalue <- sapply(geoData$features, function(feat) {\n  feat$properties$value\n})\n\npal <- colorQuantile(\"Greens\", value)\n# Add a properties$style list to each feature\ngeoData$features <- lapply(geoData$features, function(feat) {\n  feat$properties$style <- list(\n    fillColor = pal(\n      feat$properties$value)\n    #)\n  )\n  feat\n})\n\n# Add the now-styled GeoJSON object to the map\nleaflet() %>% setView(lng = -2.230899, lat=53.464987, zoom = 10) %>%\n  addTiles() %>%\n  addGeoJSON(geoData, weight=1, fillOpacity = 0.8) \n\n```\n\n#Interactivity with Shiny\n\nIt is also possible to make the leaflet maps interactive, by integrating them with Shiny applications. The final dataset for this to experiment with comes from AccStats data for 2015, which can be accessed using the Transport for London API:\n\n```{r, echo=FALSE}\nfileName <- \"tflApi.txt\"\nqueryString <-readChar(fileName, file.info(fileName)$size)\n```\n\n```{r, eval=FALSE}\nl = readLines(queryString, encoding=\"UTF-8\", warn=FALSE)\n\nd = fromJSON(l)\n\naccidents <- data.frame(lapply(as.data.frame(d), as.character), stringsAsFactors=FALSE)\n\n#also make sure data is in date format\naccidents$date2 <- as.Date(accidents$date, \"%Y-%m-%d\")\n\n```\n\nNOTE: if you're going to be using this code, you will have to make a developer account with TfL to generate your own `app_id` and `app_key` for a query string. \nOK now with this data we can create an app for looking at the number of accidents with different severity, and adjust the date range (within the year 2015) as we like. \n\nFirst load shiny package. \n```{r}\nlibrary(shiny)\n```\n\nAnd then create an app, with the leaflet map inside: \n\n```{r, eval=FALSE}\n\nui <- fluidPage(\n  titlePanel(\"Accidents in 2015\"),\n\n  sidebarLayout(\n    sidebarPanel( \n      #date selector goes here \n      dateRangeInput(\"Date range\", inputId = \"date_range\",\n        start = \"2015-01-01\",\n        end = \"2015-12-31\",\n        format = \"yyyy-mm-dd\"), \n      uiOutput('severitySelector',selected = \"Fatal\")\n      ),\n    mainPanel(\n      #leaflet output goes here\n      leafletOutput(\"map\", height = 800)\n\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  severityChoices <- sort(unique(as.character(accidents$severity)))\n  \n  #create the drop down menu with name country selector to put in placeholder in UI\n  output$severitySelector <- renderUI({\n\t                          \tselectInput(\"severitySelect\", label = \"Select severity\",\n\t\t\t\t\t                    choices = as.list(severityChoices), selected = \"Fatal\")\n  })\n  #filter data based on dates\n  dateFiltered <- reactive({\n    thing <- accidents %>% filter(date2 %in% seq(input$date_range[1],     input$date_range[2], by = \"day\") & severity %in% input$severitySelect)\n   \n  })\n  #reactive map\n  output$map <- renderLeaflet({\n    leaflet(accidents) %>%  \n      addProviderTiles(\"CartoDB.Positron\") %>%\n      fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat)) %>%\n      addLegend(position = \"bottomleft\", colors = c(\"#b10026\", \"#fd8d3c\", \"#ffeda0\"),\n        labels = c(\"Fatal\", \"Serious\", \"Slight\"), opacity = 1, title = \"Severity\")\n    })\n  \n  observe({\n    pal <- colorFactor(c(\"#b10026\", \"#fd8d3c\", \"#ffeda0\"), domain = c(\"Fatal\", \"Serious\", \"Slight\"), ordered = TRUE)\n    leafletProxy(\"map\", data = dateFiltered()) %>% clearMarkerClusters() %>%\n      addCircleMarkers(~lon, ~lat,\n        color = \"#636363\", stroke = TRUE, weight = 1,\n        fillColor = ~pal(severity), fillOpacity = 0.8,\n        radius = 5,\n        popup = ~location, \n        clusterOptions = markerClusterOptions())\n  })\n  \n  \n}\n\n\nshinyApp(ui = ui, server = server)\n\n```\n\n",
    "created" : 1516894418926.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "26299362",
    "id" : "F306BF62",
    "lastKnownWriteTime" : 1486371783,
    "last_content_update" : 1486371783,
    "path" : "~/Desktop/leaflet_tutorial.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}