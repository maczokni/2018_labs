{
    "collab_server" : "",
    "contents" : "#############################################################################################\n# MAPPING STUFF IN R                                                                        #\n# This is a little tutorial and some notes on how to map stuff in R                         #\n# Here is a useful tutorial put together by James Cheshire and Robin Lovelace:              #\n#   http://spatial.ly/2013/12/introduction-spatial-data-ggplot2/                            #\n#   I'll be pretty much stealing most of my stuff from here :D                              #\n#                                                                                           #\n# Any questions, get in touch: RekaSolymosi@tfl.gov.uk                                      #\n#                                                                                           #  \n#############################################################################################\n\n#for this tutorial you'll need these packages installed: \ninstall.packages('maps')\ninstall.packages('mapdata')\ninstall.packages('maptools')\ninstall.packages('rgdal')\ninstall.packages('RColorBrewer')\ninstall.packages('leaflet')\n\n# also don't forget to set your working directory\nsetwd(\"U:/dirs/statistical-gis-boundaries-london/statistical-gis-boundaries-london/ESRI\")\n\n#R is pretty decent for dealing with spatial data\n#even got some packages that have data in them, for example maps and mapdata let you call some maps\nlibrary(maps)\nlibrary(mapdata)\n\n#so here we can call some basic maps just by saying\nmap() #worldmap\nmap('usa')\nmap('nz')\nmap('france')\n\n#but normally we want to work with our own spatial data.\n#Normally I work with 3 types of spatial data, points, lines and polygons Let's start with polygons\n\n#OK SO first, here are some useful packages that you might want for mapping\nlibrary(maptools)\n# Set of tools for manipulating and reading geographic data, esp ESRI shapefiles\n# This is any file with a .shp extension\n# You can export a shapefile from MapInfo, or from QGIS or other GIS software as well, doesnt have to be ESRI\n# Also a lot of data you will find in the wild will be in shapefile format\n\n# For example, if we go looking for GIS Boundary files for London, much of it will be shapefiles.\n#   see here: http://data.london.gov.uk/dataset/statistical-gis-boundary-files-london\n#   and while you're there, download 'statistical-gis-boundaries-london.zip'\n\n# However this only reads in the shapefile, no associated info. A better way is to use\nlibrary(rgdal)\n# This is R's interface to the \"Geospatial Abstraction Library (GDAL)\" which is used by other \n# open source GIS packages such as QGIS and enables R to handle a broader range of spatial data formats.\n# \n# The function within this package for reading a spatial file is \"readOGR\", which reads an OGR data source \n# (OGR=OpenGIS Simple Features Reference Implementation) and layer into a suitable Spatial vector object. It can only\n# handle layers with conformable geometry features (not mixtures of points, lines, or polygons in a\n# single layer). It will set the spatial reference system if the layer has such metadata.\n# If reading a shapefile, the data source name (dsn= argument) is the folder (directory) where the\n# shapefile is, and the layer is the name of the shapefile (without the .shp extension). For example to\n# read bounds.shp from C:/Maps, do map <- readOGR(dsn=\"C:/Maps\", layer=\"bounds\"). The\n# logic behind this is that typically one keeps all the shapefiles for a project in one folder (directory).\n\n# OK so using this package, let's read in our shapefile we've saved. \nlondonBoroughs <- readOGR(dsn = \"U:/dirs/statistical-gis-boundaries-london/statistical-gis-boundaries-london/ESRI\", \"London_Borough_Excluding_MHW\")\n#if the file is in your working directory, you can just write:\nlondonBoroughs <- readOGR(dsn = \".\", \"London_Borough_Excluding_MHW\")\n\n\n# great now we have loaded a shapefile.   Just to check on it, let's plot it!\nplot(londonBoroughs)\n# simples!\n# so that is how you load up a polygon and then display it\n\n#We can also plot point data. If we have some data that has coordinates, we can put it on a map!\n#read in the csv data\nlondonCrimes <- read.csv('2016-01-metropolitan-street.csv')\n\n#this is all crimes in London (MPS jurisdiction) in January 2016. \n#It has a latitude and longitude column, and we could basically just plot it\nplot(londonCrimes$Latitude, londonCrimes$Longitude)\n#you can see a big blob that is London, and also some points scattered outside (why?)\n#but this is not particularly helpful...\n\n# so let's make coordinates instead! \nlondonCrimes_SP <- subset(londonCrimes, Latitude != \"\" | Longitude != \"\") #remove any rows with no coords\ncoords <- cbind(latitude = londonCrimes_SP$Longitude, longitude = londonCrimes_SP$Latitude)\nlondonCrimes_SP <- SpatialPointsDataFrame(coords, data = londonCrimes_SP, proj4string = CRS(\"+proj=longlat +datum=WGS84\"))\n\n#ok so lets try to plot this\nplot(londonBoroughs)\npoints(londonCrimes_SP)\n#no points appear :( let's check what go on\n\nsummary(londonBoroughs)\n#oh no what is that projection?!?!\n#let's change it, so that we have matching projection to our data points\nboroughs.wgs84 <- spTransform(londonBoroughs, CRS(\"+proj=longlat +datum=WGS84\"))\n\n#now try again\nplot(boroughs.wgs84)\npoints(londonCrimes_SP)\n\n#yaaaay\n\n#Well I mean it's slight improvements, but we still don't know much about crime in London, \n#except that it happens all over\n#So what would be better? We could count the number of points in each polygon\n#to do this we use \"over\" from the sp package (was attached when we attached maptools)\n\ncrimePerBorough <- over(londonCrimes_SP, boroughs.wgs84)\n\n#now you can look at a table of the number of crimes in each borough:\ntable(crimePerBorough$NAME)\n\n#but we want to map this\n#so let's join the data we acquired in this way (like the table I mean)\ncounts <- as.data.frame(table(crimePerBorough$NAME)) #make a df from our count table\nnames(counts)[names(counts) == 'Var1'] <- 'NAME'     #give those variables some meaningful names\nnames(counts)[names(counts) == 'Freq'] <- 'crimes'\n\n#join 'em up!\nboroughs.wgs84@data = data.frame(boroughs.wgs84@data, counts[match(boroughs.wgs84@data[,'NAME'], counts[,'NAME']),])\n\n#now to map this.\nlibrary(RColorBrewer) # for the pretty colours\ncols <- brewer.pal(n = 4, name = \"Greys\")\nlcols <- cut(boroughs.wgs84$crimes,\n             breaks = quantile(boroughs.wgs84$crimes),\n             labels = cols)\nplot(boroughs.wgs84, col = as.character(lcols))\n\n#breaks as quantile - think about other ways to break up data (equak interval - )\n\n# OK so basically you can use R as a GIS, reading in and mapping polygons, points, \n# and performing things like spatial joins of data.\n\n#OK BUT what if you wanted this to be interactive?\n# LEAFLET woohoo!\n\nlibrary(leaflet)\n\n#can just make a simple map ... DONT DO THIS THIS WILL CRASH :(\n#leaflet(data = londonCrimes) %>% \n#  addTiles() %>%\n#  addMarkers(~Longitude, ~Latitude)\n\n# so for some reason leaflet here is just not happy with lots of data points. \n# we have 74661 crimes in our db, and it struggles. so lets just take the first 100 crimes\n\nfirst100crimes <- head(londonCrimes, n=100)\n\n#now try\nleaflet(data = first100crimes) %>% \n   addTiles() %>%\n   addMarkers(~Longitude, ~Latitude)\n\n#this is pretty much it to plotting points on a map with leaflet \n#but for some reason on corporate R stutio we see no background map. \n#so lets click Export > Save as Web Page...\n# and then open this in FIREFOX (meh, sometimes explorer works too...). we'll keep doing this\n\n#can have many different background maps (try a few of these)\nleaflet(data = first100crimes) %>% \n  \n  addProviderTiles(\"CartoDB.Positron\") %>%\n#  addProviderTiles(\"Stamen.Toner\") %>%\n#  addProviderTiles(\"Thunderforest.SpinalMap\") %>%\n#  addProviderTiles(\"CartoDB.DarkMatter\") %>%\n  addMarkers(~Longitude, ~Latitude)\n\n# a list of background maps can be seen here: http://leaflet-extras.github.io/leaflet-providers/preview/\n\n# add popup markers\nleaflet(data = first100crimes) %>% addTiles() %>%\n  addMarkers(~Longitude, ~Latitude, popup = ~as.character(Crime.type))\n\n#can make them more elaborate\npopupText <- paste0(\"<strong>This is the crime type: </strong>\",\n                         first100crimes$Crime.type)\n\nleaflet(data = first100crimes) %>% addTiles() %>%\n  addMarkers(~Longitude, ~Latitude, popup = popupText)\n\n# or add cluster options\nleaflet(first100crimes) %>% addTiles() %>% addMarkers(\n  clusterOptions = markerClusterOptions()\n)\n\n# can also map polygons on leaflet\n# go back to the london crimes per borough example\n\n#make a fancy popup\nboroughs_popup <- paste0(\"<strong>Borough: </strong>\",\n                         londonBoroughs$NAME,\n                         \"<br><strong>Number of crimes: </strong>\",\n                         boroughs.wgs84$crimes)\n#create colour palette\n# rcolourbrewer gives loads to choose from, here are some examples: \n\n#DivergingBrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral\n\n#QualitativeAccent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3\n\n#SequentialBlues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd\n\n\npal <- colorNumeric(\n  palette = \"YlOrRd\",\n  domain = boroughs.wgs84$crimes\n)\n\n#make map\nleaflet() %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons( data = boroughs.wgs84,\n    stroke = TRUE, weight= 1, fillOpacity = 0.8, \n    color = ~pal(crimes), \n    popup = boroughs_popup\n  ) %>%\n#and add a Legend as well\n  addLegend(pal = pal, \n            values = boroughs.wgs84$crimes,\n            title = \"Number of crimes Jan 2016\",\n            labFormat = labelFormat(suffix = \" crimes\"),\n            opacity = 0.8\n  )\n\n\n#OK well that is pretty much that.",
    "created" : 1516895458738.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "877234873",
    "id" : "E47612D5",
    "lastKnownWriteTime" : 1462273508,
    "last_content_update" : 1462273508,
    "path" : "/Volumes/AwesomeBackup/untitled folder/dirs/MappingInR.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}